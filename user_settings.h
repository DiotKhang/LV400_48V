//#############################################################################
//
// FILE:   user_settings.h
//
// TITLE:  User Settings
//
// Description: This file is for user setting which is the same with board.h
//#############################################################################

#ifndef PI_VALUE
#define PI_VALUE ((float32_t)3.141592653589)
#endif

#ifndef ONE_NANO_SEC
#define ONE_NANO_SEC ((float32_t)0.000000001)
#endif

#ifndef TWO_RAISED_TO_THE_POWER_SIXTEEN
#define TWO_RAISED_TO_THE_POWER_SIXTEEN ((float32_t)65536.0)
#endif

#ifndef TICKS_IN_PWM_FREQUENCY
#define TICKS_IN_PWM_FREQUENCY(m, n) (uint32_t)(n / (float32_t)m)
#endif

#ifndef TRUE
#define FALSE 0
#define TRUE  1
#endif

//
// PWM pin, ADC, SDFM, Relay Selection related variables
//

#define PRIM_LEG1_PWM_BASE                   EPWM1_BASE
#define PRIM_LEG1_PWM_NO                     1
#define PRIM_LEG1_PWM_H_GPIO                 0
#define PRIM_LEG1_PWM_H_GPIO_PIN_CONFIG      GPIO_0_EPWM1A
#define PRIM_LEG1_PWM_H_DIS_GPIO_PIN_CONFIG  GPIO_0_GPIO0
#define PRIM_LEG1_PWM_L_GPIO                 1
#define PRIM_LEG1_PWM_L_GPIO_PIN_CONFIG      GPIO_1_EPWM1B
#define PRIM_LEG1_PWM_L_DIS_GPIO_PIN_CONFIG  GPIO_1_GPIO1

#define PRIM_LEG2_PWM_BASE                   EPWM2_BASE
#define PRIM_LEG2_PWM_NO                     2
#define PRIM_LEG2_PWM_H_GPIO                 2
#define PRIM_LEG2_PWM_H_GPIO_PIN_CONFIG      GPIO_2_EPWM2A
#define PRIM_LEG2_PWM_H_DIS_GPIO_PIN_CONFIG  GPIO_2_GPIO2
#define PRIM_LEG2_PWM_L_GPIO                 3
#define PRIM_LEG2_PWM_L_GPIO_PIN_CONFIG      GPIO_3_EPWM2B
#define PRIM_LEG2_PWM_L_DIS_GPIO_PIN_CONFIG  GPIO_3_GPIO3

#define SEC_LEG1_PWM_BASE                   EPWM3_BASE
#define SEC_LEG1_PWM_NO                     3
#define SEC_LEG1_PWM_H_GPIO                 4
#define SEC_LEG1_PWM_H_GPIO_PIN_CONFIG      GPIO_4_EPWM3A
#define SEC_LEG1_PWM_H_DIS_GPIO_PIN_CONFIG  GPIO_4_GPIO4
#define SEC_LEG1_PWM_L_GPIO                 5
#define SEC_LEG1_PWM_L_GPIO_PIN_CONFIG      GPIO_5_EPWM3B
#define SEC_LEG1_PWM_L_DIS_GPIO_PIN_CONFIG  GPIO_5_GPIO5

#define SEC_LEG2_PWM_BASE                   EPWM4_BASE
#define SEC_LEG2_PWM_NO                     4
#define SEC_LEG2_PWM_H_GPIO                 6
#define SEC_LEG2_PWM_H_GPIO_PIN_CONFIG      GPIO_6_EPWM4A
#define SEC_LEG2_PWM_H_DIS_GPIO_PIN_CONFIG  GPIO_6_GPIO6
#define SEC_LEG2_PWM_L_GPIO                 7
#define SEC_LEG2_PWM_L_GPIO_PIN_CONFIG      GPIO_7_EPWM4B
#define SEC_LEG2_PWM_L_DIS_GPIO_PIN_CONFIG  GPIO_7_GPIO7

#define GLOBAL_LOAD_ENABLED 0

#define MAX_PERIOD_STEP_PU ((float32_t)0.05)

//
//ISR related
//

#define ISR1_PERIPHERAL_TRIG_BASE PRIM_LEG1_PWM_BASE
#define ISR1_TRIG INT_EPWM1
#define ISR1_PIE_GROUP INTERRUPT_ACK_GROUP3

#define ISR1_TRIG_CLA CLA_TRIGGER_EPWM1INT

#if ISR1_RUNNING_ON == CLA_CORE
#define ISR2_RUNNING_ON CLA_CORE
#else
#define ISR2_RUNNING_ON C28x_CORE
#endif

#define ISR2_ECAP_BASE ECAP1_BASE
#define ISR2_PWM_BASE EPWM5_BASE
#define ISR2_TRIG INT_ECAP1
#define ISR2_PIE_GROUP INTERRUPT_ACK_GROUP4

#define ISR2_TRIG_CLA CLA_TRIGGER_ECAP1INT

#define ISR3_TIMEBASE TASKC_CPUTIMER_BASE
#define ISR3_PERIPHERAL_TRIG_BASE ADCC_BASE
#define ISR3_TRIG INT_ADCC2
#define ISR3_PIE_GROUP INTERRUPT_ACK_GROUP10

//
// Compensator related
//
#define GI_OUT_MAX   ((float32_t)0.98)
#define GI_OUT_MIN   ((float32_t)-0.1)

#define GV_OUT_MAX   ((float32_t)0.98)
#define GV_OUT_MIN   ((float32_t)-0.1)

#define VOLTS_PER_SECOND_SLEW ((float32_t)10.0)
#define AMPS_PER_SECOND_SLEW ((float32_t)0.5)

//
//100pin control card
//

//
// 0 is disabled, 1 is enabled
//
#define OVERSAMPLING_ENABLED 1
//
// enabled is 1, if 0 then 4x oversampling is used
//
#define OVERSAMPLING_12x 1

#define ADC_TRIG_SOURCE ADC_TRIGGER_EPWM5_SOCA
#define ADC_TRIG_SLOW_SOURCE ADC_TRIGGER_CPU1_TINT2

//
// Signals mapped to ADC -A
//
#define IPRIM_ADC_MODULE  ADCA_BASE
#define IPRIM_ADC_SOC_NO  ADC_SOC_NUMBER0
#define IPRIM_ADC_PIN     ADC_CH_ADCIN11
#define IPRIM_ADC_TRIG_SOURCE ADC_TRIG_SOURCE
#define IPRIM_ADC_ACQPS_SYS_CLKS 30
#define IPRIM_ADCRESULTREGBASE ADCARESULT_BASE
#define IPRIM_ADCREAD ADC_readResult(IPRIM_ADCRESULTREGBASE, IPRIM_ADC_SOC_NO)

#define ISEC_ADC_MODULE  ADCA_BASE
#define ISEC_ADC_PIN     ADC_CH_ADCIN9
#define ISEC_ADC_TRIG_SOURCE ADC_TRIG_SOURCE
#define ISEC_ADC_ACQPS_SYS_CLKS 30
#define ISEC_ADCRESULTREGBASE ADCARESULT_BASE

#define ISEC_ADC_SOC_NO_1  ADC_SOC_NUMBER1
#define ISEC_ADC_SOC_NO_2  ADC_SOC_NUMBER2
#define ISEC_ADC_SOC_NO_3  ADC_SOC_NUMBER3
#define ISEC_ADC_SOC_NO_4  ADC_SOC_NUMBER4
#define ISEC_ADC_SOC_NO_5  ADC_SOC_NUMBER5
#define ISEC_ADC_SOC_NO_6  ADC_SOC_NUMBER6
#define ISEC_ADC_SOC_NO_7  ADC_SOC_NUMBER7
#define ISEC_ADC_SOC_NO_8  ADC_SOC_NUMBER8
#define ISEC_ADC_SOC_NO_9  ADC_SOC_NUMBER9
#define ISEC_ADC_SOC_NO_10  ADC_SOC_NUMBER10
#define ISEC_ADC_SOC_NO_11  ADC_SOC_NUMBER11
#define ISEC_ADC_SOC_NO_12  ADC_SOC_NUMBER12
#define ISEC_ADC_SOC_NO_13  ADC_SOC_NUMBER13

#define ISEC_ADCREAD_1 ADC_readResult(ISEC_ADCRESULTREGBASE, ISEC_ADC_SOC_NO_1)
#define ISEC_ADCREAD_2 ADC_readResult(ISEC_ADCRESULTREGBASE, ISEC_ADC_SOC_NO_2)
#define ISEC_ADCREAD_3 ADC_readResult(ISEC_ADCRESULTREGBASE, ISEC_ADC_SOC_NO_3)
#define ISEC_ADCREAD_4 ADC_readResult(ISEC_ADCRESULTREGBASE, ISEC_ADC_SOC_NO_4)
#define ISEC_ADCREAD_5 ADC_readResult(ISEC_ADCRESULTREGBASE, ISEC_ADC_SOC_NO_5)
#define ISEC_ADCREAD_6 ADC_readResult(ISEC_ADCRESULTREGBASE, ISEC_ADC_SOC_NO_6)
#define ISEC_ADCREAD_7 ADC_readResult(ISEC_ADCRESULTREGBASE, ISEC_ADC_SOC_NO_7)
#define ISEC_ADCREAD_8 ADC_readResult(ISEC_ADCRESULTREGBASE, ISEC_ADC_SOC_NO_8)
#define ISEC_ADCREAD_9 ADC_readResult(ISEC_ADCRESULTREGBASE, ISEC_ADC_SOC_NO_9)
#define ISEC_ADCREAD_10 ADC_readResult(ISEC_ADCRESULTREGBASE, ISEC_ADC_SOC_NO_10)
#define ISEC_ADCREAD_11 ADC_readResult(ISEC_ADCRESULTREGBASE, ISEC_ADC_SOC_NO_11)
#define ISEC_ADCREAD_12 ADC_readResult(ISEC_ADCRESULTREGBASE, ISEC_ADC_SOC_NO_12)

#define ISEC_ADCREAD (ISEC_ADCREAD_1)

#if OVERSAMPLING_ENABLED == 1
    #if OVERSAMPLING_12x == 1
        #define ISEC_OVERSAMPLE_ADCREAD ((ISEC_ADCREAD_1 + ISEC_ADCREAD_2 + ISEC_ADCREAD_3 + ISEC_ADCREAD_4 + ISEC_ADCREAD_5 + ISEC_ADCREAD_6 + ISEC_ADCREAD_7 + ISEC_ADCREAD_8 + ISEC_ADCREAD_9 + ISEC_ADCREAD_10 + ISEC_ADCREAD_11 + ISEC_ADCREAD_12) * (1.0 / 12.0))
    #else
        #define ISEC_OVERSAMPLE_ADCREAD ((ISEC_ADCREAD_1 + ISEC_ADCREAD_2 + ISEC_ADCREAD_3 + ISEC_ADCREAD_4) * (0.25))
    #endif
#endif

//
// Signals mapped to ADC -B
//
#define IPRIM_TANK_ADC_MODULE  ADCB_BASE
#define IPRIM_TANK_ADC_SOC_NO  ADC_SOC_NUMBER0
#define IPRIM_TANK_ADC_PIN     ADC_CH_ADCIN8
#define IPRIM_TANK_ADC_TRIG_SOURCE ADC_TRIG_FAST_SOURCE
#define IPRIM_TANK_ADC_ACQPS_SYS_CLKS 30
#define IPRIM_TANK_ADCRESULTREGBASE ADCBRESULT_BASE
#define IPRIM_TANK_ADCREAD ADC_readResult(IPRIM_TANK_ADCRESULTREGBASE, IPRIM_TANK_ADC_SOC_NO)

//
// Signals mapped to ADC -C
//
#define VSEC_ADC_MODULE  ADCC_BASE
#define VSEC_ADC_PIN     ADC_CH_ADCIN10
#define VSEC_ADC_TRIG_SOURCE ADC_TRIG_SOURCE
#define VSEC_ADC_ACQPS_SYS_CLKS 30
#define VSEC_ADCRESULTREGBASE ADCCRESULT_BASE

#define VSEC_ADC_SOC_NO_1  ADC_SOC_NUMBER0
#define VSEC_ADC_SOC_NO_2  ADC_SOC_NUMBER1
#define VSEC_ADC_SOC_NO_3  ADC_SOC_NUMBER2
#define VSEC_ADC_SOC_NO_4  ADC_SOC_NUMBER3
#define VSEC_ADC_SOC_NO_5  ADC_SOC_NUMBER4
#define VSEC_ADC_SOC_NO_6  ADC_SOC_NUMBER5
#define VSEC_ADC_SOC_NO_7  ADC_SOC_NUMBER6
#define VSEC_ADC_SOC_NO_8  ADC_SOC_NUMBER7
#define VSEC_ADC_SOC_NO_9  ADC_SOC_NUMBER8
#define VSEC_ADC_SOC_NO_10  ADC_SOC_NUMBER9
#define VSEC_ADC_SOC_NO_11  ADC_SOC_NUMBER10
#define VSEC_ADC_SOC_NO_12  ADC_SOC_NUMBER11
#define VSEC_ADC_SOC_NO_13  ADC_SOC_NUMBER12

#define VSEC_ADCREAD_1 ADC_readResult(VSEC_ADCRESULTREGBASE, VSEC_ADC_SOC_NO_1)
#define VSEC_ADCREAD_2 ADC_readResult(VSEC_ADCRESULTREGBASE, VSEC_ADC_SOC_NO_2)
#define VSEC_ADCREAD_3 ADC_readResult(VSEC_ADCRESULTREGBASE, VSEC_ADC_SOC_NO_3)
#define VSEC_ADCREAD_4 ADC_readResult(VSEC_ADCRESULTREGBASE, VSEC_ADC_SOC_NO_4)
#define VSEC_ADCREAD_5 ADC_readResult(VSEC_ADCRESULTREGBASE, VSEC_ADC_SOC_NO_5)
#define VSEC_ADCREAD_6 ADC_readResult(VSEC_ADCRESULTREGBASE, VSEC_ADC_SOC_NO_6)
#define VSEC_ADCREAD_7 ADC_readResult(VSEC_ADCRESULTREGBASE, VSEC_ADC_SOC_NO_7)
#define VSEC_ADCREAD_8 ADC_readResult(VSEC_ADCRESULTREGBASE, VSEC_ADC_SOC_NO_8)
#define VSEC_ADCREAD_9 ADC_readResult(VSEC_ADCRESULTREGBASE, VSEC_ADC_SOC_NO_9)
#define VSEC_ADCREAD_10 ADC_readResult(VSEC_ADCRESULTREGBASE, VSEC_ADC_SOC_NO_10)
#define VSEC_ADCREAD_11 ADC_readResult(VSEC_ADCRESULTREGBASE, VSEC_ADC_SOC_NO_11)
#define VSEC_ADCREAD_12 ADC_readResult(VSEC_ADCRESULTREGBASE, VSEC_ADC_SOC_NO_12)

#define VSEC_ADCREAD (VSEC_ADCREAD_1)

#if OVERSAMPLING_ENABLED == 1
    #if OVERSAMPLING_12x == 1
        #define VSEC_OVERSAMPLE_ADCREAD ((VSEC_ADCREAD_1 + VSEC_ADCREAD_2 + VSEC_ADCREAD_3 + VSEC_ADCREAD_4 + VSEC_ADCREAD_5 + VSEC_ADCREAD_6 + VSEC_ADCREAD_7 + VSEC_ADCREAD_8 + VSEC_ADCREAD_9 + VSEC_ADCREAD_10 + VSEC_ADCREAD_11 + VSEC_ADCREAD_12) * (1.0 / 12.0))
    #else
        #define VSEC_OVERSAMPLE_ADCREAD ((VSEC_ADCREAD_1 + VSEC_ADCREAD_2 + VSEC_ADCREAD_3 + VSEC_ADCREAD_4) * (0.25))
    #endif
#endif

#define VPRIM_ADC_MODULE  ADCB_BASE
#define VPRIM_ADC_PIN     ADC_CH_ADCIN2
#define VPRIM_ADC_TRIG_SOURCE ADC_TRIG_SOURCE
#define VPRIM_ADC_ACQPS_SYS_CLKS 30
#define VPRIM_ADCRESULTREGBASE ADCBRESULT_BASE

#define VPRIM_ADC_SOC_NO_1  ADC_SOC_NUMBER0
#define VPRIM_ADC_SOC_NO_2  ADC_SOC_NUMBER1
#define VPRIM_ADC_SOC_NO_3  ADC_SOC_NUMBER2
#define VPRIM_ADC_SOC_NO_4  ADC_SOC_NUMBER3
#define VPRIM_ADC_SOC_NO_5  ADC_SOC_NUMBER4
#define VPRIM_ADC_SOC_NO_6  ADC_SOC_NUMBER5
#define VPRIM_ADC_SOC_NO_7  ADC_SOC_NUMBER6
#define VPRIM_ADC_SOC_NO_8  ADC_SOC_NUMBER7
#define VPRIM_ADC_SOC_NO_9  ADC_SOC_NUMBER8
#define VPRIM_ADC_SOC_NO_10  ADC_SOC_NUMBER9
#define VPRIM_ADC_SOC_NO_11  ADC_SOC_NUMBER10
#define VPRIM_ADC_SOC_NO_12  ADC_SOC_NUMBER11
#define VPRIM_ADC_SOC_NO_13  ADC_SOC_NUMBER12

#define VPRIM_ADCREAD_1 ADC_readResult(VPRIM_ADCRESULTREGBASE, VPRIM_ADC_SOC_NO_1)
#define VPRIM_ADCREAD_2 ADC_readResult(VPRIM_ADCRESULTREGBASE, VPRIM_ADC_SOC_NO_2)
#define VPRIM_ADCREAD_3 ADC_readResult(VPRIM_ADCRESULTREGBASE, VPRIM_ADC_SOC_NO_3)
#define VPRIM_ADCREAD_4 ADC_readResult(VPRIM_ADCRESULTREGBASE, VPRIM_ADC_SOC_NO_4)
#define VPRIM_ADCREAD_5 ADC_readResult(VPRIM_ADCRESULTREGBASE, VPRIM_ADC_SOC_NO_5)
#define VPRIM_ADCREAD_6 ADC_readResult(VPRIM_ADCRESULTREGBASE, VPRIM_ADC_SOC_NO_6)
#define VPRIM_ADCREAD_7 ADC_readResult(VPRIM_ADCRESULTREGBASE, VPRIM_ADC_SOC_NO_7)
#define VPRIM_ADCREAD_8 ADC_readResult(VPRIM_ADCRESULTREGBASE, VPRIM_ADC_SOC_NO_8)
#define VPRIM_ADCREAD_9 ADC_readResult(VPRIM_ADCRESULTREGBASE, VPRIM_ADC_SOC_NO_9)
#define VPRIM_ADCREAD_10 ADC_readResult(VPRIM_ADCRESULTREGBASE, VPRIM_ADC_SOC_NO_10)
#define VPRIM_ADCREAD_11 ADC_readResult(VPRIM_ADCRESULTREGBASE, VPRIM_ADC_SOC_NO_11)
#define VPRIM_ADCREAD_12 ADC_readResult(VPRIM_ADCRESULTREGBASE, VPRIM_ADC_SOC_NO_12)

#define VPRIM_ADCREAD (VPRIM_ADCREAD_1)

#if OVERSAMPLING_ENABLED == 1
    #if OVERSAMPLING_12x == 1
        #define VPRIM_OVERSAMPLE_ADCREAD ((VPRIM_ADCREAD_1 + VPRIM_ADCREAD_2 + VPRIM_ADCREAD_3 + VPRIM_ADCREAD_4 + VPRIM_ADCREAD_5 + VPRIM_ADCREAD_6 + VPRIM_ADCREAD_7 + VPRIM_ADCREAD_8 + VPRIM_ADCREAD_9 + VPRIM_ADCREAD_10 + VPRIM_ADCREAD_11 + VPRIM_ADCREAD_12) * (1.0 / 12.0))
    #else
        #define VPRIM_OVERSAMPLE_ADCREAD ((VPRIM_ADCREAD_1 + VPRIM_ADCREAD_2 + VPRIM_ADCREAD_3 + VPRIM_ADCREAD_4) * (0.25))
    #endif
#endif

#if PROTECTION == PROTECTION_ENABLED
//
// set 1 to enable the appropriate protection scheme
//
#define BOARD_PROTECTION_IPRIM 0
#define BOARD_PROTECTION_ISEC 1
#define BOARD_PROTECTION_IPRIM_TANK 1
#else
//
// set 0 to disable the appropriate protection scheme
//
#define BOARD_PROTECTION_IPRIM 0
#define BOARD_PROTECTION_ISEC 0
#define BOARD_PROTECTION_IPRIM_TANK 0
#endif

#define IPRIM_CMPSS_BASE CMPSS1_BASE
#define IPRIM_CMPSS_ASYSCTRL_CMPHPMUX  ASYSCTL_CMPHPMUX_SELECT_1
#define IPRIM_CMPSS_ASYSCTRL_CMPLPMUX  ASYSCTL_CMPLPMUX_SELECT_1
#define IPRIM_CMPSS_ASYSCTRL_MUX_VALUE 4

#define IPRIM_CMPSS_XBAR_MUX XBAR_MUX00
#define IPRIM_CMPSS_XBAR_MUX_VAL XBAR_EPWM_MUX00_CMPSS1_CTRIPH_OR_L
#define IPRIM_CMPSS_XBAR_FLAG1 XBAR_INPUT_FLG_CMPSS1_CTRIPH
#define IPRIM_CMPSS_XBAR_FLAG2 XBAR_INPUT_FLG_CMPSS1_CTRIPL

#define IPRIM_SHUNT_CMPSS_BASE CMPSS2_BASE
#define IPRIM_SHUNT_CMPSS_ASYSCTRL_CMPHPMUX  ASYSCTL_CMPHPMUX_SELECT_2
#define IPRIM_SHUNT_CMPSS_ASYSCTRL_CMPLPMUX  ASYSCTL_CMPLPMUX_SELECT_2
#define IPRIM_SHUNT_CMPSS_ASYSCTRL_MUX_VALUE 0

#define IPRIM_SHUNT_CMPSS_XBAR_MUX XBAR_MUX02
#define IPRIM_SHUNT_CMPSS_XBAR_MUX_VAL XBAR_EPWM_MUX02_CMPSS2_CTRIPH_OR_L
#define IPRIM_SHUNT_CMPSS_XBAR_FLAG1 XBAR_INPUT_FLG_CMPSS2_CTRIPH
#define IPRIM_SHUNT_CMPSS_XBAR_FLAG2 XBAR_INPUT_FLG_CMPSS2_CTRIPL

#define ISEC_CMPSS_BASE CMPSS6_BASE
#define ISEC_CMPSS_ASYSCTRL_CMPHPMUX ASYSCTL_CMPHPMUX_SELECT_6
#define ISEC_CMPSS_ASYSCTRL_CMPLPMUX ASYSCTL_CMPLPMUX_SELECT_6
#define ISEC_CMPSS_ASYSCTRL_MUX_VALUE 3

#define ISEC_XBAR_MUX XBAR_MUX10
#define ISEC_XBAR_MUX_VAL XBAR_EPWM_MUX10_CMPSS6_CTRIPH_OR_L
#define ISEC_CMPSS_XBAR_FLAG1 XBAR_INPUT_FLG_CMPSS6_CTRIPH
#define ISEC_CMPSS_XBAR_FLAG2 XBAR_INPUT_FLG_CMPSS6_CTRIPL

#define ISEC_TANK_CMPSS_BASE CMPSS4_BASE
#define ISEC_TANK_CMPSS_ASYSCTRL_CMPHPMUX ASYSCTL_CMPHPMUX_SELECT_4
#define ISEC_TANK_CMPSS_ASYSCTRL_CMPLPMUX ASYSCTL_CMPLPMUX_SELECT_4
#define ISEC_TANK_CMPSS_ASYSCTRL_MUX_VALUE 1

#define ISEC_TANK_H_XBAR_MUX XBAR_MUX06
#define ISEC_TANK_H_PWM_XBAR_MUX_VAL XBAR_EPWM_MUX06_CMPSS4_CTRIPH
#define ISEC_TANK_H_OUT_XBAR_MUX_VAL XBAR_OUT_MUX06_CMPSS4_CTRIPOUTH

#define ISEC_TANK_L_XBAR_MUX XBAR_MUX07
#define ISEC_TANK_L_PWM_XBAR_MUX_VAL XBAR_EPWM_MUX07_CMPSS4_CTRIPL
#define ISEC_TANK_L_OUT_XBAR_MUX_VAL XBAR_OUT_MUX07_CMPSS4_CTRIPOUTL

#define ISEC_TANK_H_CMPSS_XBAR_FLAG XBAR_INPUT_FLG_CMPSS4_CTRIPH
#define ISEC_TANK_L_CMPSS_XBAR_FLAG XBAR_INPUT_FLG_CMPSS4_CTRIPL

//
// Set DAC H to 2150 and L to 1950
// This is done by emperical tuning of the board for efficiency
//
#define ISEC_TANK_DACHVAL 2150
#define ISEC_TANK_DACLVAL 1950

//
// IPRM TANK -> HSEC Pin 25 -> A6 (F28004x) -> CMPSS5
//
#define IPRIM_TANK_CMPSS_BASE CMPSS5_BASE
#define IPRIM_TANK_CMPSS_ASYSCTRL_CMPHPMUX  ASYSCTL_CMPHPMUX_SELECT_5
#define IPRIM_TANK_CMPSS_ASYSCTRL_CMPLPMUX  ASYSCTL_CMPLPMUX_SELECT_5
#define IPRIM_TANK_CMPSS_ASYSCTRL_MUX_VALUE 0
//
// CMPSS5 goes to MUX08/09, set the defines to setup the Xbar properly
//

#define IPRIM_TANK_H_XBAR_MUX XBAR_MUX08
#define IPRIM_TANK_H_PWM_XBAR_MUX_VAL XBAR_EPWM_MUX08_CMPSS5_CTRIPH
#define IPRIM_TANK_H_OUT_XBAR_MUX_VAL XBAR_OUT_MUX08_CMPSS5_CTRIPOUTH

#define IPRIM_TANK_L_XBAR_MUX XBAR_MUX09
#define IPRIM_TANK_L_PWM_XBAR_MUX_VAL XBAR_EPWM_MUX09_CMPSS5_CTRIPL
#define IPRIM_TANK_L_OUT_XBAR_MUX_VAL XBAR_OUT_MUX09_CMPSS5_CTRIPOUTL

#define IPRIM_TANK_H_CMPSS_XBAR_FLAG XBAR_INPUT_FLG_CMPSS5_CTRIPH
#define IPRIM_TANK_L_CMPSS_XBAR_FLAG XBAR_INPUT_FLG_CMPSS5_CTRIPL

//
// Set DAC H to 2150 and L to 1950
// This is done by emperical tuning of the board for efficiency
//
#define IPRIM_TANK_DACHVAL 2150
#define IPRIM_TANK_DACLVAL 1950

//
// Debug related
// Active synchronous rectification debug
//
#define GPIO_XBAR1                      58
#define GPIO_XBAR1_PIN_CONFIG           GPIO_58_OUTPUTXBAR1

#define GPIO_XBAR2                      59
#define GPIO_XBAR2_PIN_CONFIG           GPIO_59_OUTPUTXBAR2

//
// GPIO profiling
//
#define GPIO_PROFILING1 40
#define GPIO_PROFILING1_SET_REG GPIO_O_GPBSET
#define GPIO_PROFILING1_CLEAR_REG GPIO_O_GPBCLEAR
#define GPIO_PROFILING1_SET GPIO_GPBSET_GPIO40
#define GPIO_PROFILING1_CLEAR GPIO_GPBCLEAR_GPIO40
#define GPIO_PROFILING1_PIN_CONFIG GPIO_40_GPIO40

#define GPIO_PROFILING2 57
#define GPIO_PROFILING2_SET_REG GPIO_O_GPBSET
#define GPIO_PROFILING2_CLEAR_REG GPIO_O_GPBCLEAR
#define GPIO_PROFILING2_SET GPIO_GPBSET_GPIO57
#define GPIO_PROFILING2_CLEAR GPIO_GPBCLEAR_GPIO57
#define GPIO_PROFILING2_PIN_CONFIG GPIO_57_GPIO57

#define GPIO_PROFILING3 16
#define GPIO_PROFILING3_SET_REG GPIO_O_GPASET
#define GPIO_PROFILING3_CLEAR_REG GPIO_O_GPACLEAR
#define GPIO_PROFILING3_SET GPIO_GPASET_GPIO16
#define GPIO_PROFILING3_CLEAR GPIO_GPACLEAR_GPIO16
#define GPIO_PROFILING3_PIN_CONFIG GPIO_16_GPIO16
#define GPIO_PROFILING3_SET_REG GPIO_O_GPASET
#define GPIO_PROFILING3_RESET_REG GPIO_O_GPACLEAR

//
// LED blink
//
#define GPIO_LED1 34
#define GPIO_LED1_SET GPIO_GPASET_GPIO34
#define GPIO_LED1_CLEAR GPIO_GPACLEAR_GPIO34
#define GPIO_LED1_PIN_CONFIG GPIO_34_GPIO34

//
// ADC Related
//
#define ADC_PU_SCALE_FACTOR  ((float32_t)0.000244140625)
#define ADC_PU_PPB_SCALE_FACTOR ((float32_t)0.000488281250) //1/2^11

#define CMPSS_HYSTERESIS 2
#define CMPSSS_FILTER_PRESCALAR 2
#define CMPSS_WINODW 10
#define CMPSS_THRESHOLD 7

//
//CPU time related
//
#define TASKA_CPUTIMER_BASE CPUTIMER0_BASE
#define TASKB_CPUTIMER_BASE CPUTIMER1_BASE
#define TASKC_CPUTIMER_BASE CPUTIMER2_BASE

#define TASKA_FREQ_HZ 100
#define TASKB_FREQ_HZ 10
#define TASKC_FREQ_HZ ISR3_FREQUENCY_HZ

#define GET_TASKA_TIMER_OVERFLOW_STATUS CPUTimer_getTimerOverflowStatus(TASKA_CPUTIMER_BASE)
#define CLEAR_TASKA_TIMER_OVERFLOW_FLAG CPUTimer_clearOverflowFlag(TASKA_CPUTIMER_BASE)

#define GET_TASKB_TIMER_OVERFLOW_STATUS CPUTimer_getTimerOverflowStatus(TASKB_CPUTIMER_BASE)
#define CLEAR_TASKB_TIMER_OVERFLOW_FLAG CPUTimer_clearOverflowFlag(TASKB_CPUTIMER_BASE)

//
// End of File
//
